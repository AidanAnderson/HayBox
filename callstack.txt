
>config/platform/config.cpp
    loop()
        backends->sendReport()
            >HAL/pico/src/comms/GamecubeBackend.cpp
            sendReport()
                _gamecube->WaitForPollStart()                   main waiting period for pico
                    >joybus-pio/src/GamecubeConsole.cpp
                    WaitForPollStart()
                ScanInputs()                                    button input reading
                UpdateOutputs()                                 button input -> coordinate out
                _gamecube->WaitForPollEnd()                     brief waiting for pico
                    >joybus-pio/src/GamecubeConsole.cpp
                    WaitForPollEnd()
                _gamecube->SendReport
                    >joybus-pio/src/GamecubeConsole.cpp
                    SendReport()
            >HAL/avr/src/comms/GamecubeBackend.cpp
            sendReport()
                ScanInputs()                                    button input reading
                UpdateOutputs()                                 button input -> coordinate out
                _gamecube->write(_data)
                    >nicohoodNintendo/src/GamecubeAPI.hpp
                    write()                                     brief waiting period for avr
                        gc_write()
                            >nicohoodNintendo/src/Gamecube.c
                            gc_write()
                                gc_n64_get()
                                    >nicohoodNintendo/src/Gamecube_N64.c
                                    gc_n64_get()
                                        [a bunch of assembly that waits for a poll]
                delayMicroseconds()                             main waiting period for avr

Todo: modify the GamecubeBackend.cpp for each HAL

So I need to have a startup period where I measure the exact polling interval (ScanInputs) without doing any extra work, at first.
    1 second long?
    measure both the minimum interval in microseconds and the average

Then, I integer divide the polling interval and time more calls to ScanInputs and UpdateOutputs.

I have to be done soon enough to wait for the incoming poll though.

run:
> ~/.platformio/penv/bin/pio run -c platformio.ini

static uint minLoop = 0;
static uint loopCount = 0;
static bool detect = true;//false means run
static uint sampleCount = 1;
static uint sampleSpacing = 0;
static uint oldSampleTime = 0;
static uint newSampleTime = 0;
static uint loopTime = 0;

oldSampleTime = newSampleTime;
newSampleTime = micros();
loopTime = newSampleTime - oldSampleTime;

if(detect) {
    //run loop time detection procedure
    if(loopCount != 0) {
        loopCount++;
        if(loopTime > 300) {//screen out implausibly fast samples; the limit is 2500 Hz (400 us)
            minLoop = min(minLoop, loopTime);
        }
    } else if(loopCount >= 100) {
        detect = false;
        while(1000*sampleCount <= minLoop) {//we want [sampleCount] ms-spaced samples within the smallest possible loop
            sampleCount++;
        }
        sampleSpacing = minLoop / sampleCount;
        if(sampleSpacing < 900 && sampleCount > 1) {
            sampleCount--;
            sampleSpacing = minLoop / sampleCount;
        }
    }
} else {
    //run the delay procedure based on samplespacing
    //in the stock arduino software, it samples 850 us after the end of the poll response
    //we want the last sample to begin [850 + extra computation time] before the beginning of the last poll to give room for the sample and the travel time+nerf computation
    //
    for int(i = sampleCount; i > 0; i--) {
        const int computationTime = 900;//us
        const int targetTime = (i*sampleSpacing) - computationTime;
        while(micros() - newSampleTime < targetTime) {
            //spinlock
        }
        scanInputs();
        updateOutputs();
        //Log latest raw outputs in a rolling buffer (how long?)
        //APPLY NERFS HERE when transferring data into output structure
    }
    if(loopTime > minLoop+(minLoop >> 1)) {//if the loop time is 50% longer than expected
        detect = true;//stop scanning inputs briefly and re-measure timings
    }
}
